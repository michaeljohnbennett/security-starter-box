/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { SimpleSwap, SimpleSwapInterface } from "../SimpleSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISwapRouter",
        name: "_swapRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeTier",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "contract ISwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "swapWETHForDAI",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610c57380380610c57833981810160405281019061003291906100e1565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b60006100ae82610091565b9050919050565b6100be816100a3565b81146100c957600080fd5b50565b6000815190506100db816100b5565b92915050565b6000602082840312156100f7576100f661006c565b5b6000610105848285016100cc565b91505092915050565b608051610b20610137600039600081816101400152818161022e01526102f00152610b206000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632ed5016f1461005c5780634aa4a4fc1461008c57806372f5d98a146100aa578063c31c9c07146100c8578063e0bab4c4146100e6575b600080fd5b61007660048036038101906100719190610612565b610104565b604051610083919061064e565b60405180910390f35b6100946102d0565b6040516100a191906106aa565b60405180910390f35b6100b26102e8565b6040516100bf91906106e3565b60405180910390f35b6100d06102ee565b6040516100dd919061075d565b60405180910390f35b6100ee610312565b6040516100fb91906106aa565b60405180910390f35b600061012673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc233308561032a565b61016573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc27f000000000000000000000000000000000000000000000000000000000000000084610482565b600060405180610100016040528073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168152602001736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016102859190610856565b6020604051808303816000875af11580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c89190610887565b915050919050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b610bb881565b7f000000000000000000000000000000000000000000000000000000000000000081565b736b175474e89094c44da98b954eedeac495271d0f81565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610361939291906108b4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103cb919061095c565b6000604051808303816000865af19150503d8060008114610408576040519150601f19603f3d011682016040523d82523d6000602084013e61040d565b606091505b509150915081801561043b575060008151148061043a57508080602001905181019061043991906109ab565b5b5b61047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190610a35565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016104b7929190610a55565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610521919061095c565b6000604051808303816000865af19150503d806000811461055e576040519150601f19603f3d011682016040523d82523d6000602084013e610563565b606091505b5091509150818015610591575060008151148061059057508080602001905181019061058f91906109ab565b5b5b6105d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c790610aca565b60405180910390fd5b5050505050565b600080fd5b6000819050919050565b6105ef816105dc565b81146105fa57600080fd5b50565b60008135905061060c816105e6565b92915050565b600060208284031215610628576106276105d7565b5b6000610636848285016105fd565b91505092915050565b610648816105dc565b82525050565b6000602082019050610663600083018461063f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069482610669565b9050919050565b6106a481610689565b82525050565b60006020820190506106bf600083018461069b565b92915050565b600062ffffff82169050919050565b6106dd816106c5565b82525050565b60006020820190506106f860008301846106d4565b92915050565b6000819050919050565b600061072361071e61071984610669565b6106fe565b610669565b9050919050565b600061073582610708565b9050919050565b60006107478261072a565b9050919050565b6107578161073c565b82525050565b6000602082019050610772600083018461074e565b92915050565b61078181610689565b82525050565b610790816106c5565b82525050565b61079f816105dc565b82525050565b6107ae81610669565b82525050565b610100820160008201516107cb6000850182610778565b5060208201516107de6020850182610778565b5060408201516107f16040850182610787565b5060608201516108046060850182610778565b5060808201516108176080850182610796565b5060a082015161082a60a0850182610796565b5060c082015161083d60c0850182610796565b5060e082015161085060e08501826107a5565b50505050565b60006101008201905061086c60008301846107b4565b92915050565b600081519050610881816105e6565b92915050565b60006020828403121561089d5761089c6105d7565b5b60006108ab84828501610872565b91505092915050565b60006060820190506108c9600083018661069b565b6108d6602083018561069b565b6108e3604083018461063f565b949350505050565b600081519050919050565b600081905092915050565b60005b8381101561091f578082015181840152602081019050610904565b60008484015250505050565b6000610936826108eb565b61094081856108f6565b9350610950818560208601610901565b80840191505092915050565b6000610968828461092b565b915081905092915050565b60008115159050919050565b61098881610973565b811461099357600080fd5b50565b6000815190506109a58161097f565b92915050565b6000602082840312156109c1576109c06105d7565b5b60006109cf84828501610996565b91505092915050565b600082825260208201905092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000610a1f6003836109d8565b9150610a2a826109e9565b602082019050919050565b60006020820190508181036000830152610a4e81610a12565b9050919050565b6000604082019050610a6a600083018561069b565b610a77602083018461063f565b9392505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000610ab46002836109d8565b9150610abf82610a7e565b602082019050919050565b60006020820190508181036000830152610ae381610aa7565b905091905056fea26469706673582212204e3609ed4c6534cca09ece20fa78682652cb8de87fb905e23fe6b8459d9075fc64736f6c63430008110033";

type SimpleSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleSwap__factory extends ContractFactory {
  constructor(...args: SimpleSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _swapRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleSwap> {
    return super.deploy(_swapRouter, overrides || {}) as Promise<SimpleSwap>;
  }
  override getDeployTransaction(
    _swapRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_swapRouter, overrides || {});
  }
  override attach(address: string): SimpleSwap {
    return super.attach(address) as SimpleSwap;
  }
  override connect(signer: Signer): SimpleSwap__factory {
    return super.connect(signer) as SimpleSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleSwapInterface {
    return new utils.Interface(_abi) as SimpleSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleSwap {
    return new Contract(address, _abi, signerOrProvider) as SimpleSwap;
  }
}
