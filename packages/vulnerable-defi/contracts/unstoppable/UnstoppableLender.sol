/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contract-loader/node_modules/find-up/__scribble_ReentrancyUtils.sol";

interface IReceiver {
    function receiveTokens(address tokenAddress, uint256 amount) external;
}

///  @title UnstoppableLender
///  @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
contract UnstoppableLender is __scribble_ReentrancyUtils, ReentrancyGuard {
    struct vars0 {
        bool old_0;
    }

    IERC20 public immutable damnValuableToken;
    uint256 public poolBalance;

    constructor(address tokenAddress) {
        require(tokenAddress != address(0), "Token address cannot be zero");
        damnValuableToken = IERC20(tokenAddress);
    }

    function depositTokens(uint256 amount) external nonReentrant() {
        require(amount > 0, "Must deposit at least one token");
        damnValuableToken.transferFrom(msg.sender, address(this), amount);
        poolBalance = poolBalance + amount;
    }

    function flashLoan(uint256 borrowAmount) external {
        vars0 memory _v;
        unchecked {
            _v.old_0 = poolBalance == damnValuableToken.balanceOf(address(this));
        }
        _original_UnstoppableLender_flashLoan(borrowAmount);
        unchecked {
            if (!(_v.old_0)) {
                emit AssertionFailed("0: ");
                assert(false);
            }
        }
    }

    function _original_UnstoppableLender_flashLoan(uint256 borrowAmount) private nonReentrant() {
        require(borrowAmount > 0, "Must borrow at least one token");
        uint256 balanceBefore = damnValuableToken.balanceOf(address(this));
        require(balanceBefore >= borrowAmount, "Not enough tokens in pool");
        assert(poolBalance == balanceBefore);
        damnValuableToken.transfer(msg.sender, borrowAmount);
        IReceiver(msg.sender).receiveTokens(address(damnValuableToken), borrowAmount);
        uint256 balanceAfter = damnValuableToken.balanceOf(address(this));
        require(balanceAfter >= balanceBefore, "Flash loan hasn't been paid back");
    }
}